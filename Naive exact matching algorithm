def readgenome(filename):
    genome= ''
    with open(filename, 'r') as f:
        for line in f:
            if not line[0] == ">":
                genome+= line.rstrip()
    return genome 

genome= readgenome("put the fasta file")


def readfastq(filename):
    sequences= []
    qualities= []
    with open(filename) as fh:
        while True: 
            fh.readline() 
            seq= fh.readline().rstrip()
            fh.readline()
            qual= fh.readline().rstrip()
            if len(seq)== 0:
                break
            sequences.append(seq)
            qualities.append(qual)
    return sequences,qualities


phix_reads, _= readfastq("put the fastq path") # not interested in the second value 

def naive(p,t):
    occurences= []
    for i in range(len(t)- len(p)+1):
        match= True 
        for j in range(len(p)):
            if t[i+j] != p[j]:
                match= False
                break 
        if match:
            occurrences.append(i)
    return occurences 

# matching the reverse complement strand as well.
def reversecomplement(s):
    complement= {'A':'T','T':'A','C':'G','G':'C','N':'N'}



numMatched= 0 # keeping track of how many reads are matched 
n= 0 
for r in phix_reads:
    r= r[:30] # due to the more occurence of sequencing errors and less matches in case of aligning the whole length of read to the ref seq, the first 30 bases are just aligned.
    matches= naive(r, genome) # getting the set of matches from naive
    matches.extend(naive(reversecomplement(r), genome))
    n+= 1 # this is a counter of the total number of reads that we process
    if len(matches) > 0: 
        numMatched+= 1 
print(numMatched,'/', n,' reads matched the genome!')
