"""
the package contains a few useful functions for DNA sequences 
"""
def GC_content(DNA_seq):
    "this function computes the GC content of a DNA sequence"
    for i in range(len(DNA_seq)):
        undefined= DNA_seq.count("n")+DNA_seq.count("N")
        A= DNA_seq.count('G')
        B= DNA_seq.count('C')
        C= DNA_seq.count('g')
        D= DNA_seq.count('c')
    return (((A+B+C+D)-undefined)/(len(DNA_seq)-undefined))*100

def has_stop_codon(dna,frame=0): 
    "this function checks if there is any stop codon in our DNA sequence"
    stop_codon_found= False
    stop_codons= ['tga','tag','taa']
    for i in range(frame,len(dna),3): 
        codon= dna[i:i+3].lower() 
        if codon in stop_codons:
            stop_codon_found= True 
            break
    return stop_codon_found

def reverse_complement(DNA):
    "this function generates the reverse complement of your DNA seq"
    reverse_strand= ""
    for i in range(len(DNA)):
        if DNA[i]== "A":
            reverse_strand+= "T"
        elif DNA[i]== "T":
            reverse_strand+= "A"
        elif DNA[i]== "C":
            reverse_strand+= "G"
        elif DNA[i]== "G":
            reverse_strand+= "C" 
    return reverse_strand[::-1]

def complement(dna):
    "this function generates the reverse complement of your DNA seq"
    basecomplement= {'A':'T','T':'A','C':'G','G':'C','N':'N','a':'t','t':'a','c':'g','g':'c','n':'n'}
    letters= list(dna)
    letters= [basecomplement[base] for base in letters]
    A= ''.join(letters)
    A= A[::-1]
    return letters,A
    
    
